pipeline {
    /*def app */
    agent any
    
    environment {
        /* registry = "thiago899/docker-test" */
        registryCredential = 'docker-hub-credentials'
        dockerImage = ''
    }
stages{
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        steps{
            checkout scm
        }
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */
        steps{
            script {
                /*app = docker.build("local")*/ //Modo Anterior sem environment
                /* dockerimage = docker.build registry + ":${env.BUILD_NUMBER}" */
				dockerimage = docker.build ("pipeline {
    /*def app */
    agent any
    
    environment {
        /* registry = "thiago899/docker-test" */
        registryCredential = 'docker-hub-credentials'
        dockerImage = ''
    }
stages{
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        steps{
            checkout scm
        }
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */
        steps{
            script {
                /*app = docker.build("joittest/eproc")*/ //Modo Anterior sem environment
                /* dockerimage = docker.build registry + ":${env.BUILD_NUMBER}" */
				dockerimage = docker.build ("MyFinance/MyFinance")
            }
        }
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */
        steps{
             script {
                dockerimage.inside {
                    echo "Tests passed"
                }
            }
        }
    }
    
    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        
        /*docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }*/ //Modo Anterior sem environment
        steps{
            script {
                docker.withRegistry('', registryCredential ) {
                    dockerimage.push()
                }
            }
        }
    }
    
    stage('Deliver for development') {
            when {
                branch 'development' 
            }
            steps {
               echo "passei na branch de dev"
            }
        }
    stage('Deploy for production') {
            when {
                branch 'master'  
            }
            steps {
               echo "passei na branch master"
            }
        }
    }
}")
            }
        }
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */
        steps{
             script {
                dockerimage.inside {
                    echo "Tests passed"
                }
            }
        }
    }
    
    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        
        /*docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }*/ //Modo Anterior sem environment
        steps{
            script {
                docker.withRegistry('', registryCredential ) {
                    dockerimage.push()
                }
            }
        }
    }
    
    stage('Deliver for development') {
            when {
                branch 'development' 
            }
            steps {
               echo "passei na branch de dev"
            }
        }
    stage('Deploy for production') {
            when {
                branch 'master'  
            }
            steps {
               echo "passei na branch master"
            }
        }
    }
}
